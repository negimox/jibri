# Stage 1: Build environment for Jibri
FROM maven:3.8-openjdk-11 AS builder

# Install git
RUN apt-get update && apt-get install -y git

# Set the working directory
WORKDIR /build

# The source code will be mounted at runtime
# Build command will be executed when the container starts
CMD ["mvn", "clean", "package"]

# Stage 2: Jitsi Meet + Jibri environment based on Ubuntu 18.04
FROM ubuntu:18.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set environment variables
ENV JITSI_MEET_CONFIG_DIR=/etc/jitsi/meet
ENV JITSI_VIDEOBRIDGE_CONFIG_DIR=/etc/jitsi/videobridge

# Install base packages
RUN apt-get update && apt-get install -y \
    gnupg2 \
    wget \
    curl \
    apt-transport-https \
    sudo \
    nginx-full \
    software-properties-common \
    jq \
    unzip \
    ffmpeg \
    x11vnc \
    xvfb \
    xdotool \
    xserver-xorg-video-dummy \
    alsa-utils \
    icewm \
    linux-image-extra-virtual \
    openssh-server \
    openjdk-11-jre-headless \
    lua5.2

# Set up hostname (will be overridden by container hostname)
RUN echo "jitsi-docker" > /etc/hostname

# Add Prosody repository
RUN echo deb http://packages.prosody.im/debian $(lsb_release -sc) main | tee -a /etc/apt/sources.list && \
    wget https://prosody.im/files/prosody-debian-packages.key -O- | apt-key add -

# Add Jitsi repository
RUN curl https://download.jitsi.org/jitsi-key.gpg.key | sh -c 'gpg --dearmor > /usr/share/keyrings/jitsi-keyring.gpg' && \
    echo 'deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/' | tee /etc/apt/sources.list.d/jitsi-stable.list > /dev/null

# Update and install Jitsi Meet
RUN apt-get update && \
    echo "jitsi-videobridge jitsi-videobridge/jvb-hostname string meet.example.org" | debconf-set-selections && \
    echo "jitsi-meet-web-config jitsi-meet/cert-choice select 'Generate a new self-signed certificate'" | debconf-set-selections

# Install Jitsi Meet packages
RUN apt-get install -y \
    jitsi-meet \
    jitsi-meet-web \
    jitsi-meet-prosody \
    jitsi-meet-turnserver \
    jitsi-meet-web-config

# Set up ALSA loopback module
RUN echo "snd_aloop" >> /etc/modules

# Install Google Chrome stable
RUN curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | tee /etc/apt/sources.list.d/google-chrome.list && \
    apt-get -y update && \
    apt-get -y install google-chrome-stable && \
    apt-mark hold google-chrome-stable

# Add Chrome managed policies to disable security warnings
RUN mkdir -p /etc/opt/chrome/policies/managed && \
    echo '{ "CommandLineFlagSecurityWarningsEnabled": false }' > /etc/opt/chrome/policies/managed/managed_policies.json

# Install ChromeDriver
RUN CHROME_VER=$(dpkg -s google-chrome-stable | egrep "^Version" | cut -d " " -f2 | cut -d. -f1-3) && \
    CHROMELAB_LINK="https://googlechromelabs.github.io/chrome-for-testing" && \
    CHROMEDRIVER_LINK=$(curl -s $CHROMELAB_LINK/known-good-versions-with-downloads.json | jq -r ".versions[].downloads.chromedriver | select(. != null) | .[].url" | grep linux64 | grep "$CHROME_VER" | tail -1) && \
    wget -O /tmp/chromedriver-linux64.zip $CHROMEDRIVER_LINK && \
    rm -rf /tmp/chromedriver-linux64 && \
    unzip -o /tmp/chromedriver-linux64.zip -d /tmp && \
    mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/ && \
    chown root:root /usr/local/bin/chromedriver && \
    chmod 755 /usr/local/bin/chromedriver

# Create jibri user and add to appropriate groups
RUN useradd -m -d /opt/jibri jibri && \
    usermod -aG adm,audio,video,plugdev jibri

# Create necessary directories for Jibri
RUN mkdir -p /etc/jitsi/jibri /var/log/jitsi/jibri && \
    chown -R jibri:jibri /etc/jitsi/jibri /var/log/jitsi/jibri && \
    mkdir -p /opt/jibri/recordings && \
    chown -R jibri:jibri /opt/jibri

# Create directory for the Jibri JAR file
WORKDIR /opt/jibri
RUN mkdir -p /opt/jibri/lib

# Create a basic configuration file for Jibri
RUN mkdir -p /etc/jitsi/jibri && \
    cat > /etc/jitsi/jibri/jibri.conf << 'EOF'
jibri {
  recording {
    recordings-directory = "/opt/jibri/recordings"
    finalize-script = "/opt/jibri/finalize.sh"
  }
  api {
    http {
      external-api-port = 2222
      internal-api-port = 3333
    }
  }
  call-status-checks {
    no-media-timeout = 30 seconds
    all-muted-timeout = 10 minutes
    call-hanging-timeout = 30 seconds
  }
}
EOF

# Create a simple finalize script
RUN cat > /opt/jibri/finalize.sh << 'EOF'
#!/bin/bash
echo "Recording finalized in $1"
exit 0
EOF

# Create startup script to launch all services
RUN cat > /opt/start-jitsi.sh << 'EOF'
#!/bin/bash

# Set hostname if provided
if [ ! -z "$JITSI_HOSTNAME" ]; then
    echo "Setting hostname to $JITSI_HOSTNAME"
    sed -i "s/jitsi-meet.example.com/$JITSI_HOSTNAME/g" /etc/jitsi/meet/$JITSI_HOSTNAME-config.js
    sed -i "s/jitsi-meet.example.com/$JITSI_HOSTNAME/g" /etc/prosody/conf.avail/$JITSI_HOSTNAME.cfg.lua
    sed -i "s/jitsi-meet.example.com/$JITSI_HOSTNAME/g" /etc/jitsi/jicofo/config
    sed -i "s/jitsi-meet.example.com/$JITSI_HOSTNAME/g" /etc/jitsi/videobridge/config
fi

# Start services
echo "Starting nginx..."
service nginx start

echo "Starting prosody..."
service prosody start

echo "Starting jicofo..."
service jicofo start

echo "Starting jitsi-videobridge2..."
service jitsi-videobridge2 start

echo "Starting Jibri..."
sudo -u jibri java -jar /opt/jibri/lib/jibri.jar &

# Keep container running
tail -f /var/log/nginx/access.log
EOF

RUN chmod +x /opt/jibri/finalize.sh /opt/start-jitsi.sh

# Command to start all services
CMD ["/opt/start-jitsi.sh"]
