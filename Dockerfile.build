# Stage 1: Build environment
FROM maven:3.8-openjdk-11 AS builder

# Install git
RUN apt-get update && apt-get install -y git

# Set the working directory
WORKDIR /build

# The source code will be mounted at runtime
# Build command will be executed when the container starts
CMD ["mvn", "clean", "package"]

# Stage 2: Installation environment based on Ubuntu 18.04
FROM ubuntu:18.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install pre-requisites as mentioned in README.md
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    gnupg \
    jq \
    unzip \
    ffmpeg \
    apt-transport-https \
    software-properties-common \
    linux-image-extra-virtual \
    x11vnc \
    xvfb \
    xdotool \
    xserver-xorg-video-dummy \
    alsa-utils \
    icewm

# Set up ALSA loopback module
RUN echo "snd_aloop" >> /etc/modules && \
    modprobe snd_aloop || echo "Note: modprobe may not work in Docker. The module will be loaded on the host system."

# Install Google Chrome stable
RUN curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | tee /etc/apt/sources.list.d/google-chrome.list && \
    apt-get -y update && \
    apt-get -y install google-chrome-stable && \
    apt-mark hold google-chrome-stable

# Add Chrome managed policies to disable security warnings
RUN mkdir -p /etc/opt/chrome/policies/managed && \
    echo '{ "CommandLineFlagSecurityWarningsEnabled": false }' > /etc/opt/chrome/policies/managed/managed_policies.json

# Install ChromeDriver
RUN CHROME_VER=$(dpkg -s google-chrome-stable | egrep "^Version" | cut -d " " -f2 | cut -d. -f1-3) && \
    CHROMELAB_LINK="https://googlechromelabs.github.io/chrome-for-testing" && \
    CHROMEDRIVER_LINK=$(curl -s $CHROMELAB_LINK/known-good-versions-with-downloads.json | jq -r ".versions[].downloads.chromedriver | select(. != null) | .[].url" | grep linux64 | grep "$CHROME_VER" | tail -1) && \
    wget -O /tmp/chromedriver-linux64.zip $CHROMEDRIVER_LINK && \
    rm -rf /tmp/chromedriver-linux64 && \
    unzip -o /tmp/chromedriver-linux64.zip -d /tmp && \
    mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/ && \
    chown root:root /usr/local/bin/chromedriver && \
    chmod 755 /usr/local/bin/chromedriver

# Create jibri user and add to appropriate groups
RUN useradd -m -d /opt/jibri jibri && \
    usermod -aG adm,audio,video,plugdev jibri

# Create necessary directories
RUN mkdir -p /etc/jitsi/jibri /var/log/jitsi/jibri && \
    chown -R jibri:jibri /etc/jitsi/jibri /var/log/jitsi/jibri && \
    mkdir -p /opt/jibri/recordings && \
    chown -R jibri:jibri /opt/jibri

# Create directory for the JAR file
WORKDIR /opt/jibri
RUN mkdir -p /opt/jibri/lib

# Copy configuration files
COPY config/jibri.conf /etc/jitsi/jibri/jibri.conf
COPY scripts/finalize.sh /opt/jibri/finalize.sh
COPY scripts/start.sh /opt/jibri/start.sh

# Make scripts executable and set proper ownership
RUN chmod +x /opt/jibri/finalize.sh /opt/jibri/start.sh && \
    chown -R jibri:jibri /opt/jibri /etc/jitsi/jibri

# Switch to jibri user
USER jibri

# Command to start Jibri
CMD ["/opt/jibri/start.sh"]
